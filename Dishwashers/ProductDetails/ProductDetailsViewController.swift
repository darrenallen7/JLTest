//
//  ProductDetailsViewController.swift
//  Dishwashers
//
//  Created by Darren Allen on 19/06/2018.
//  Copyright (c) 2018 Swift7Media. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol ProductDetailsViewControllerInput: class
{
    func displayDetails(withProductDetails productDetails: ProductDetails)
}

class ProductDetailsViewController: UIViewController, ProductDetailsViewControllerInput
{
    var output: ProductDetailsInteractorInput?
    var router: ProductDetailsRouter?
    var productDetails: ProductDetails?

    var productImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        
        return imageView
    }()
    
    var productInfoTitle: UILabel = {
        let label = UILabel()
        label.text = "Product information"
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textColor = .gray
        label.font = UIFont.systemFont(ofSize: 30, weight: UIFont.Weight.light)
        return label
    }()
    
    var productInfo: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.textColor = .gray
        label.font = UIFont.systemFont(ofSize: 22)
        label.numberOfLines = 0
        return label
    }()
    
    var productCodeLabel: UILabel = {
        let label = UILabel()
        label.translatesAutoresizingMaskIntoConstraints = false
        label.numberOfLines = 1
        label.textColor = .gray
        return label
    }()
    

    // MARK: - View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.view.backgroundColor = .white
        setupView()
        output?.getProductDetails()
    }
    
    func setupView()
    {
        view.addSubview(productImageView)
        view.addSubview(productInfoTitle)
        view.addSubview(productInfo)
        view.addSubview(productCodeLabel)
        
        NSLayoutConstraint.activate([
            productImageView.topAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.topAnchor),
            productImageView.leftAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.leftAnchor),
            productImageView.rightAnchor.constraint(equalTo: self.view.safeAreaLayoutGuide.rightAnchor),
            productInfoTitle.topAnchor.constraint(equalTo: productImageView.bottomAnchor, constant: 50),
            productInfoTitle.leftAnchor.constraint(equalTo: productImageView.leftAnchor, constant: 10),
            productInfoTitle.rightAnchor.constraint(equalTo: productImageView.rightAnchor, constant: -10),
            productInfo.topAnchor.constraint(equalTo: productInfoTitle.bottomAnchor, constant: 5),
            productInfo.leftAnchor.constraint(equalTo: productImageView.leftAnchor, constant: 10),
            productInfo.rightAnchor.constraint(equalTo: productImageView.rightAnchor, constant: -10),
            productCodeLabel.topAnchor.constraint(equalTo: productInfo.bottomAnchor, constant: 30),
            productCodeLabel.leftAnchor.constraint(equalTo: productImageView.leftAnchor, constant: 10),
            productCodeLabel.rightAnchor.constraint(equalTo: productImageView.rightAnchor, constant: -10),
        ])
    }

    func displayDetails(withProductDetails productDetails: ProductDetails)
    {
        DispatchQueue.main.async {
            self.productDetails = productDetails
            if let _productDetails = self.productDetails
            {
                self.title = _productDetails.title
                self.productInfo.attributedText = _productDetails.details.productInformation.htmlToAttributedString
                self.productCodeLabel.text = "Product code: \(_productDetails.code)"
            }
            
        }
    }
}

extension String {
    var htmlToAttributedString: NSAttributedString? {
        guard let data = data(using: .utf8) else { return NSAttributedString() }
        do {
            return try NSAttributedString(data: data, options: [NSAttributedString.DocumentReadingOptionKey.documentType:  NSAttributedString.DocumentType.html], documentAttributes: nil)
        } catch {
            return NSAttributedString()
        }
    }
    var htmlToString: String {
        return htmlToAttributedString?.string ?? ""
    }
}
